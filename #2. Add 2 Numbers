# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # Create a dummy node to simplify list construction
        dummy_head = ListNode(0)
        current = dummy_head
        carry = 0
        
        # Traverse both lists
        while l1 or l2 or carry:
            # Get the current values from the lists, defaulting to 0 if a list is exhausted
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            # Calculate the sum and the new carry
            total = val1 + val2 + carry
            carry = total // 10  # Carry for the next iteration
            current.next = ListNode(total % 10)  # Create a new node with the sum's ones digit
            current = current.next  # Move the current pointer
            
            # Move to the next nodes in the lists, if available
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        
        # Return the result, skipping the dummy node
        return dummy_head.next
